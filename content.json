{"meta":{"title":"CodeFish","subtitle":null,"description":"","author":"CodeFish","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"入坑ava后端开发学习路线","slug":"入坑ava后端开发学习路线","date":"2020-01-30T07:22:54.000Z","updated":"2020-01-30T07:58:46.435Z","comments":true,"path":"2020/01/30/入坑ava后端开发学习路线/","link":"","permalink":"http://yoursite.com/2020/01/30/%E5%85%A5%E5%9D%91ava%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","excerpt":"","text":"学习路线结构网络图一、基础知识1.语言本身语法基础 OO编程思想：类、对象、封装、继承、多态、接口 容器 异常 泛型 I/O 反射 注解 2.数据结构与算法 几大基础数据结构类型烂熟于心，比如：字符串、链表、二叉树、栈、队列等等；基本的几大算法要了如指掌，比如查找、排序、动态规划等等。 3.TCP/IP协议栈 TCP/IP可以说是当下互联网通信的基石，无论如何一定要对TCP/IP的协议栈了如指掌，包括:ARP协议、IP协议、ICMP协议、TCP和UDP协议、ICNP协议、TCP和UDP协议、DNS协议、HTTP协议、HTTPS协议等等。 4.设计模式 不需要23种设计模式全部都熟悉，常见的几个，比如：单列模式、工厂模式、代理模式、策略模式。模仿方法模式等几个熟练于心即可。 5.数据库和SQL 数据库基本原理了解，SQL语句熟练书写。 二、项目工具 Linux系统：基本命令会使用，Linux系统上常用的服务器会部署 代码管理:SVN或Git二选一，持续练习，熟练使用，基于Maven或Gradle的Java项目管理二选一，熟练使用 三、应用层框架1.Spring全家桶 了解Spring、Mybatis等框架的基本原理 Spring Boot框架会熟练使用、掌握其基本原理 SSM : Spring + SpringMVC + Mybatis SSM组合框架会上手搭建项目、开发业务、掌握基本原理 2.中间件技术 消息队列： 主流的如RabbitMQ、Kafka等 RPC通信框架：主流的如gRPC、Thrift、Dubbo等 NoSWQL数据库：主流的如Redis、memcached、ElasticSearch等 NIO网络通信框架:主流的如Netty等 这些成熟的中间件框架在企业级产品里应用的十分广泛，建议是先要熟练使用，要是能了解底层原理实现那就更加分了。 3.分布式微服务 当下微服务盛行，是个公司都说自己在搞微服务，随意诸如SpringCloud这样的微服务框架要学，要求也是先学会使用，再尝试搞懂原理。 4.虚拟化/容器化 虚拟化、容器化是未来发展的大趋势，很多规模化企业在搭建SaaS/PaaS/LaaS平台，在此过程中诞生的一系列关于该方面的技术，在学有余力的情况下最好也涉猎一下。典型的比如：Docker容器、kubernetes编排技术。 四、关注源码/性能在如今这个流量极其密集的互联网时代，关注到源码和性能层面的程序员才是顶级的好码农。 关注JDK源码及设计思想 关注Java并发编程原理及实践 关注JVM细节原理与调优 关注上述应用框架的核心思想和内部源码 关注数据库深度优化 等等 最后共勉 越总结发现自己会的越少，这是在网上搜集的和自己整理的学习路线，不当之处还请指出。 最后，基础最重要，多思考、总结、回顾、实践，分享热爱，这也是我写博客的初衷，加油，不拼搏，枉少年。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-01-20T06:11:28.943Z","updated":"2020-01-20T06:11:28.943Z","comments":true,"path":"2020/01/20/hello-world/","link":"","permalink":"http://yoursite.com/2020/01/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}